Index: MeepMeepTesting/src/main/java/com/example/meepmeeptesting/MeepMeepTesting.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.meepmeeptesting;\r\n\r\nimport com.acmerobotics.roadrunner.geometry.Pose2d;\r\nimport com.acmerobotics.roadrunner.geometry.Vector2d;\r\nimport com.noahbres.meepmeep.MeepMeep;\r\nimport com.noahbres.meepmeep.core.colorscheme.scheme.ColorSchemeBlueDark;\r\nimport com.noahbres.meepmeep.core.colorscheme.scheme.ColorSchemeRedDark;\r\nimport com.noahbres.meepmeep.roadrunner.DefaultBotBuilder;\r\nimport com.noahbres.meepmeep.roadrunner.entity.RoadRunnerBotEntity;\r\n\r\nimport java.util.Vector;\r\n\r\npublic class MeepMeepTesting {\r\n    public static void main(String args[]) {\r\n        MeepMeep mm = new MeepMeep(800);\r\n\r\n        RoadRunnerBotEntity bot = new DefaultBotBuilder(mm)\r\n                // set first bot to be blue\r\n                .setColorScheme(new ColorSchemeBlueDark())\r\n                // set bot constraints: maxVel, maxAccel, maxAngVel, maxAngAccel, track width\r\n                .setConstraints(73.17330064499293, 73.17330064499293, Math.toRadians(180), Math.toRadians(180), 13)\r\n                .followTrajectorySequence(drive ->\r\n                        drive.trajectorySequenceBuilder(new Pose2d(32.5, -62, Math.toRadians(90)))\r\n                                .lineToLinearHeading(new Pose2d(48,-14.8, Math.toRadians(90)))\r\n                                //.lineToLinearHeading(new Pose2d(29,-4, Math.toRadians(135)))\r\n                                .splineTo(new Vector2d(35,-8), Math.toRadians(135))\r\n                                .build()\r\n                );\r\n\r\n\r\n\r\n        mm.setBackground(MeepMeep.Background.FIELD_POWERPLAY_KAI_DARK)\r\n                .setDarkMode(true)\r\n                .setBackgroundAlpha(0.95f)\r\n                .addEntity(bot)\r\n                .start();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/MeepMeepTesting/src/main/java/com/example/meepmeeptesting/MeepMeepTesting.java b/MeepMeepTesting/src/main/java/com/example/meepmeeptesting/MeepMeepTesting.java
--- a/MeepMeepTesting/src/main/java/com/example/meepmeeptesting/MeepMeepTesting.java	
+++ b/MeepMeepTesting/src/main/java/com/example/meepmeeptesting/MeepMeepTesting.java	
@@ -20,10 +20,14 @@
                 // set bot constraints: maxVel, maxAccel, maxAngVel, maxAngAccel, track width
                 .setConstraints(73.17330064499293, 73.17330064499293, Math.toRadians(180), Math.toRadians(180), 13)
                 .followTrajectorySequence(drive ->
-                        drive.trajectorySequenceBuilder(new Pose2d(32.5, -62, Math.toRadians(90)))
-                                .lineToLinearHeading(new Pose2d(48,-14.8, Math.toRadians(90)))
-                                //.lineToLinearHeading(new Pose2d(29,-4, Math.toRadians(135)))
-                                .splineTo(new Vector2d(35,-8), Math.toRadians(135))
+                        drive.trajectorySequenceBuilder(new Pose2d(33.2, -62, Math.toRadians(90)))
+                                .lineToLinearHeading(new Pose2d(13,-58,Math.toRadians(90)))
+                                .lineToLinearHeading(new Pose2d(13,-12,Math.toRadians(90)))
+                                .lineToLinearHeading(new Pose2d(27.2,-10,Math.toRadians(90)))
+                                .lineToLinearHeading(new Pose2d(32,-14, Math.toRadians(90)))
+                                .lineToLinearHeading(new Pose2d(62.2,-11.3, Math.toRadians(0)))
+                                .lineToLinearHeading(new Pose2d(30,-15, Math.toRadians(0)))
+                                .lineToLinearHeading(new Pose2d(22.7,-12.3, Math.toRadians(99.4)))
                                 .build()
                 );
 
Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/opmodes/Autonomous/ParkOnly.java
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/opmodes/Autonomous/ParkOnly.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/opmodes/Autonomous/ParkOnly.java
deleted file mode 100644
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/opmodes/Autonomous/ParkOnly.java	
+++ /dev/null	
@@ -1,248 +0,0 @@
-package org.firstinspires.ftc.teamcode.opmodes.Autonomous;
-
-import static org.firstinspires.ftc.teamcode.util.UtilConstants.tagFirstId;
-import static org.firstinspires.ftc.teamcode.util.UtilConstants.tagSecondId;
-import static org.firstinspires.ftc.teamcode.util.UtilConstants.tagThirdId;
-import static org.firstinspires.ftc.teamcode.util.UtilConstants.right;
-import static org.firstinspires.ftc.teamcode.util.UtilConstants.verticalSpeed;
-
-import com.acmerobotics.roadrunner.geometry.Pose2d;
-import com.acmerobotics.roadrunner.geometry.Vector2d;
-import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
-import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
-
-import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;
-import org.firstinspires.ftc.teamcode.drive.MecanumDriveCancelable;
-import org.firstinspires.ftc.teamcode.mechanisms.Claw;
-import org.firstinspires.ftc.teamcode.mechanisms.SimpleBotVerticalSlide;
-import org.firstinspires.ftc.teamcode.pipelines.AprilTagPipeline;
-import org.firstinspires.ftc.teamcode.trajectorysequence.TrajectorySequence;
-import org.firstinspires.ftc.teamcode.util.LOCATION;
-import org.openftc.apriltag.AprilTagDetection;
-import org.openftc.easyopencv.OpenCvCamera;
-import org.openftc.easyopencv.OpenCvCameraFactory;
-import org.openftc.easyopencv.OpenCvCameraRotation;
-
-import java.util.ArrayList;
-
-@Autonomous(name = "Parking", group = "official")
-public class ParkOnly extends LinearOpMode
-{
-    private LOCATION location = LOCATION.FIRST;
-    private TrajectorySequence complete;
-
-    OpenCvCamera camera;
-    AprilTagPipeline aprilTagDetectionPipeline;
-
-    Claw claw;
-    SimpleBotVerticalSlide verticalSlide;
-
-    // Lens intrinsics
-    // UNITS ARE PIXELS
-    // NOTE: this calibration is for the C920 webcam at 800x448.
-    // You will need to do your own calibration for other configurations!
-    double fx = 578.272;
-    double fy = 578.272;
-    double cx = 402.145;
-    double cy = 221.506;
-
-    // UNITS ARE METERS
-    double tagsize = 0.166;
-
-
-    AprilTagDetection tagOfInterest = null;
-
-    Pose2d startPose = right;
-
-    @Override
-    public void runOpMode() throws InterruptedException
-    {
-        MecanumDriveCancelable drive = new MecanumDriveCancelable(hardwareMap);
-        drive.setPoseEstimate(startPose);
-
-        claw = new Claw(hardwareMap, telemetry);
-        verticalSlide = new SimpleBotVerticalSlide(hardwareMap, telemetry);
-
-        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier("cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());
-        camera = OpenCvCameraFactory.getInstance().createWebcam(hardwareMap.get(WebcamName.class, "Webcam"), cameraMonitorViewId);
-        aprilTagDetectionPipeline = new AprilTagPipeline(tagsize, fx, fy, cx, cy);
-
-        camera.setPipeline(aprilTagDetectionPipeline);
-        camera.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener()
-        {
-            @Override
-            public void onOpened()
-            {
-                camera.startStreaming(800,448, OpenCvCameraRotation.UPRIGHT);
-            }
-
-            @Override
-            public void onError(int errorCode)
-            {
-
-            }
-        });
-
-        telemetry.setMsTransmissionInterval(50);
-
-        /*
-         * The INIT-loop:
-         * This REPLACES waitForStart!
-         */
-        while (!isStarted() && !isStopRequested())
-        {
-            ArrayList<AprilTagDetection> currentDetections = aprilTagDetectionPipeline.getLatestDetections();
-
-            if(currentDetections.size() != 0)
-            {
-                boolean tagFound = false;
-
-                for(AprilTagDetection tag : currentDetections)
-                {
-                    if(tagFirstId == tag.id || tagSecondId == tag.id || tagThirdId == tag.id)
-                    {
-                        tagOfInterest = tag;
-                        tagFound = true;
-                        break;
-                    }
-                }
-
-                if(tagFound)
-                {
-                    telemetry.addLine("Tag of interest is in sight!\n\nLocation data:");
-                    tagToTelemetry(tagOfInterest);
-                }
-                else
-                {
-                    telemetry.addLine("Don't see tag of interest :(");
-
-                    if(tagOfInterest == null)
-                    {
-                        telemetry.addLine("(The tag has never been seen)");
-                    }
-                    else
-                    {
-                        telemetry.addLine("\nBut we HAVE seen the tag before; last seen at:");
-                        tagToTelemetry(tagOfInterest);
-                    }
-                }
-
-            }
-            else
-            {
-                telemetry.addLine("Don't see tag of interest :(");
-
-                if(tagOfInterest == null)
-                {
-                    telemetry.addLine("(The tag has never been seen)");
-                }
-                else
-                {
-                    telemetry.addLine("\nBut we HAVE seen the tag before; last seen at:");
-                    tagToTelemetry(tagOfInterest);
-                }
-
-            }
-
-            telemetry.update();
-            sleep(20);
-        }
-
-        /*
-         * The START command just came in: now work off the latest snapshot acquired
-         * during the init loop.
-         */
-
-        /* Update the telemetry */
-        if(tagOfInterest != null)
-        {
-            telemetry.addLine("Tag snapshot:\n");
-            tagToTelemetry(tagOfInterest);
-            telemetry.update();
-        }
-        else
-        {
-            telemetry.addLine("No tag snapshot available, it was never sighted during the init loop :(");
-            telemetry.update();
-        }
-
-        TrajectorySequence first = drive.trajectorySequenceBuilder(startPose)
-                .addTemporalMarker(0,() -> {
-                    claw.close();
-                    sleep(500);
-                    verticalSlide.setPosition(verticalSpeed, 200);
-                })
-                .waitSeconds(2)
-
-                .lineTo(new Vector2d(54,15))
-                .lineTo(new Vector2d(28,15))
-                .addSpatialMarker(new Vector2d(30,15), () ->{
-                    verticalSlide.setPosition(verticalSpeed, 0);
-                })
-                .build();
-
-        TrajectorySequence second = drive.trajectorySequenceBuilder(startPose)
-                .lineTo(new Vector2d(30,42))
-                .build();
-
-        TrajectorySequence third = drive.trajectorySequenceBuilder(startPose)
-                .addTemporalMarker(0,() -> {
-                    claw.close();
-                    sleep(500);
-                    verticalSlide.setPosition(verticalSpeed, 200);
-                })
-                .waitSeconds(2)
-                .lineTo(new Vector2d(58,64))
-                .lineTo(new Vector2d(28,64))
-                .addSpatialMarker(new Vector2d(35,-12), () ->{
-                    verticalSlide.setPosition(verticalSpeed, 0);
-                })
-                .build();
-
-        /* Actually do something useful */
-        if(tagOfInterest == null || tagOfInterest.id == tagFirstId)
-        {
-            location = LOCATION.FIRST;
-        }
-        else if (tagOfInterest.id == tagSecondId)
-        {
-            location = LOCATION.SECOND;
-        }
-        else if (tagOfInterest.id == tagThirdId)
-        {
-            location = LOCATION.THIRD;
-        }
-
-        switch(location) {
-
-            case FIRST: {
-
-                complete = first;
-                telemetry.addData("OpenCV", "Pos 1 Detected");
-                telemetry.update();
-                break;
-            }
-
-            case SECOND: {
-                complete = second;
-                telemetry.addData("OpenCV", "Pos 2 Detected");
-                telemetry.update();
-                break;
-            }
-            case THIRD: {
-                complete = third;
-                telemetry.addData("OpenCV", "Pos 3 Detected");
-                telemetry.update();
-                break;
-            }
-        }
-
-        if (!isStopRequested())
-            drive.followTrajectorySequence(complete);
-    }
-
-    void tagToTelemetry(AprilTagDetection detection)
-    {
-        telemetry.addLine(String.format("\nDetected tag ID=%d", detection.id));
-    }
-}
\ No newline at end of file
Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/opmode/LocalizationTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode.drive.opmode;\r\n\r\nimport com.acmerobotics.roadrunner.geometry.Pose2d;\r\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\r\nimport com.qualcomm.robotcore.eventloop.opmode.TeleOp;\r\nimport com.qualcomm.robotcore.hardware.DcMotor;\r\n\r\nimport org.firstinspires.ftc.teamcode.drive.MecanumDriveCancelable;\r\n\r\n/**\r\n * This is a simple teleop routine for testing localization. Drive the robot around like a normal\r\n * teleop routine and make sure the robot's estimated pose matches the robot's actual pose (slight\r\n * errors are not out of the ordinary, especially with sudden drive motions). The goal of this\r\n * exercise is to ascertain whether the localizer has been configured properly (note: the pure\r\n * encoder localizer heading may be significantly off if the track width has not been tuned).\r\n */\r\n@TeleOp(group = \"drive\")\r\npublic class LocalizationTest extends LinearOpMode {\r\n    @Override\r\n    public void runOpMode() throws InterruptedException {\r\n        MecanumDriveCancelable drive = new MecanumDriveCancelable(hardwareMap);\r\n\r\n        drive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);\r\n\r\n        waitForStart();\r\n\r\n        while (!isStopRequested()) {\r\n            drive.setWeightedDrivePower(\r\n                    new Pose2d(\r\n                            -gamepad1.left_stick_y * 0.8,\r\n                            -gamepad1.right_stick_x * 0.8,\r\n                            -gamepad1.left_stick_x  * 0.6\r\n                    )\r\n            );\r\n\r\n            drive.update();\r\n\r\n            Pose2d poseEstimate = drive.getPoseEstimate();\r\n            telemetry.addData(\"x\", poseEstimate.getX());\r\n            telemetry.addData(\"y\", poseEstimate.getY());\r\n            telemetry.addData(\"heading\", poseEstimate.getHeading());\r\n            telemetry.update();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/opmode/LocalizationTest.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/opmode/LocalizationTest.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/opmode/LocalizationTest.java	
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/opmode/LocalizationTest.java	
@@ -18,7 +18,7 @@
 public class LocalizationTest extends LinearOpMode {
     @Override
     public void runOpMode() throws InterruptedException {
-        MecanumDriveCancelable drive = new MecanumDriveCancelable(hardwareMap);
+        SampleMecanumDrive drive = new SampleMecanumDrive(hardwareMap);
 
         drive.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
 
@@ -27,9 +27,9 @@
         while (!isStopRequested()) {
             drive.setWeightedDrivePower(
                     new Pose2d(
-                            -gamepad1.left_stick_y * 0.8,
-                            -gamepad1.right_stick_x * 0.8,
-                            -gamepad1.left_stick_x  * 0.6
+                            -gamepad1.left_stick_y,
+                            -gamepad1.left_stick_x,
+                            -gamepad1.right_stick_x
                     )
             );
 
@@ -42,4 +42,4 @@
             telemetry.update();
         }
     }
-}
+}
\ No newline at end of file
Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/opmode/TurnTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode.drive.opmode;\r\n\r\nimport com.acmerobotics.dashboard.config.Config;\r\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\r\nimport com.qualcomm.robotcore.eventloop.opmode.Disabled;\r\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\r\n\r\nimport org.firstinspires.ftc.teamcode.drive.MecanumDriveCancelable;\r\n\r\n/*\r\n * This is a simple routine to test turning capabilities.\r\n */\r\n@Config\r\n@Disabled\r\n@Autonomous(group = \"drive\")\r\npublic class TurnTest extends LinearOpMode {\r\n    public static double ANGLE = 90; // deg\r\n\r\n    @Override\r\n    public void runOpMode() throws InterruptedException {\r\n        MecanumDriveCancelable drive = new MecanumDriveCancelable(hardwareMap);\r\n\r\n        waitForStart();\r\n\r\n        if (isStopRequested()) return;\r\n\r\n        drive.turn(Math.toRadians(ANGLE));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/opmode/TurnTest.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/opmode/TurnTest.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/opmode/TurnTest.java	
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/drive/opmode/TurnTest.java	
@@ -11,7 +11,6 @@
  * This is a simple routine to test turning capabilities.
  */
 @Config
-@Disabled
 @Autonomous(group = "drive")
 public class TurnTest extends LinearOpMode {
     public static double ANGLE = 90; // deg
