Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/opmodes/Autonomous/LeftSideSingleCone.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode.opmodes.Autonomous;\r\n\r\nimport static org.firstinspires.ftc.teamcode.util.UtilConstants.left;\r\nimport static org.firstinspires.ftc.teamcode.util.UtilConstants.tagFirstId;\r\nimport static org.firstinspires.ftc.teamcode.util.UtilConstants.tagSecondId;\r\nimport static org.firstinspires.ftc.teamcode.util.UtilConstants.tagThirdId;\r\nimport static org.firstinspires.ftc.teamcode.util.UtilConstants.verticalSpeed;\r\n\r\nimport com.acmerobotics.roadrunner.geometry.Pose2d;\r\nimport com.acmerobotics.roadrunner.geometry.Vector2d;\r\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\r\nimport com.qualcomm.robotcore.eventloop.opmode.Disabled;\r\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\r\n\r\nimport org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;\r\nimport org.firstinspires.ftc.teamcode.drive.MecanumDriveCancelable;\r\nimport org.firstinspires.ftc.teamcode.mechanisms.Claw;\r\nimport org.firstinspires.ftc.teamcode.mechanisms.SimpleBotVerticalSlide;\r\nimport org.firstinspires.ftc.teamcode.pipelines.AprilTagPipeline;\r\nimport org.firstinspires.ftc.teamcode.trajectorysequence.TrajectorySequence;\r\nimport org.firstinspires.ftc.teamcode.util.LOCATION;\r\nimport org.openftc.apriltag.AprilTagDetection;\r\nimport org.openftc.easyopencv.OpenCvCamera;\r\nimport org.openftc.easyopencv.OpenCvCameraFactory;\r\nimport org.openftc.easyopencv.OpenCvCameraRotation;\r\n\r\nimport java.util.ArrayList;\r\n\r\n@Disabled\r\n@Autonomous(group = \"official\")\r\npublic class LeftSideSingleCone extends LinearOpMode\r\n{\r\n    private LOCATION location = LOCATION.FIRST;\r\n    private TrajectorySequence complete;\r\n\r\n    OpenCvCamera camera;\r\n    AprilTagPipeline aprilTagDetectionPipeline;\r\n\r\n    Claw claw;\r\n    SimpleBotVerticalSlide verticalSlide;\r\n\r\n\r\n    // Lens intrinsics\r\n    // UNITS ARE PIXELS\r\n    // NOTE: this calibration is for the C920 webcam at 800x448.\r\n    // You will need to do your own calibration for other configurations!\r\n    double fx = 578.272;\r\n    double fy = 578.272;\r\n    double cx = 402.145;\r\n    double cy = 221.506;\r\n\r\n    // UNITS ARE METERS\r\n    double tagsize = 0.166;\r\n\r\n\r\n    AprilTagDetection tagOfInterest = null;\r\n\r\n    Pose2d startPose = left;\r\n\r\n    @Override\r\n    public void runOpMode() throws InterruptedException\r\n    {\r\n\r\n        MecanumDriveCancelable drive = new MecanumDriveCancelable(hardwareMap);\r\n        drive.setPoseEstimate(startPose);\r\n\r\n        claw = new Claw(hardwareMap, telemetry);\r\n        verticalSlide = new SimpleBotVerticalSlide(hardwareMap, telemetry);\r\n\r\n        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(\"cameraMonitorViewId\", \"id\", hardwareMap.appContext.getPackageName());\r\n        camera = OpenCvCameraFactory.getInstance().createWebcam(hardwareMap.get(WebcamName.class, \"Webcam\"), cameraMonitorViewId);\r\n        aprilTagDetectionPipeline = new AprilTagPipeline(tagsize, fx, fy, cx, cy);\r\n\r\n        camera.setPipeline(aprilTagDetectionPipeline);\r\n        camera.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener()\r\n        {\r\n            @Override\r\n            public void onOpened()\r\n            {\r\n                camera.startStreaming(800,448, OpenCvCameraRotation.UPRIGHT);\r\n            }\r\n\r\n            @Override\r\n            public void onError(int errorCode)\r\n            {\r\n\r\n            }\r\n        });\r\n\r\n        telemetry.setMsTransmissionInterval(50);\r\n\r\n        /*\r\n         * The INIT-loop:\r\n         * This REPLACES waitForStart!\r\n         */\r\n        while (!isStarted() && !isStopRequested())\r\n        {\r\n            ArrayList<AprilTagDetection> currentDetections = aprilTagDetectionPipeline.getLatestDetections();\r\n\r\n            if(currentDetections.size() != 0)\r\n            {\r\n                boolean tagFound = false;\r\n\r\n                for(AprilTagDetection tag : currentDetections)\r\n                {\r\n                    if(tagFirstId == tag.id || tagSecondId == tag.id || tagThirdId == tag.id)\r\n                    {\r\n                        tagOfInterest = tag;\r\n                        tagFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if(tagFound)\r\n                {\r\n                    telemetry.addLine(\"Tag of interest is in sight!\\n\\nLocation data:\");\r\n                    tagToTelemetry(tagOfInterest);\r\n                }\r\n                else\r\n                {\r\n                    telemetry.addLine(\"Don't see tag of interest :(\");\r\n\r\n                    if(tagOfInterest == null)\r\n                    {\r\n                        telemetry.addLine(\"(The tag has never been seen)\");\r\n                    }\r\n                    else\r\n                    {\r\n                        telemetry.addLine(\"\\nBut we HAVE seen the tag before; last seen at:\");\r\n                        tagToTelemetry(tagOfInterest);\r\n                    }\r\n                }\r\n\r\n            }\r\n            else\r\n            {\r\n                telemetry.addLine(\"Don't see tag of interest :(\");\r\n\r\n                if(tagOfInterest == null)\r\n                {\r\n                    telemetry.addLine(\"(The tag has never been seen)\");\r\n                }\r\n                else\r\n                {\r\n                    telemetry.addLine(\"\\nBut we HAVE seen the tag before; last seen at:\");\r\n                    tagToTelemetry(tagOfInterest);\r\n                }\r\n\r\n            }\r\n\r\n            telemetry.update();\r\n\r\n            TrajectorySequence third = drive.trajectorySequenceBuilder(startPose)\r\n                    .addTemporalMarker(0,() -> {\r\n                        claw.close();\r\n                    })\r\n                    .waitSeconds(2)\r\n                    .lineTo(new Vector2d(58,-10))\r\n                    .waitSeconds(1)\r\n                    .lineTo(new Vector2d(20,-12.5))\r\n                    .addSpatialMarker(new Vector2d(56,-15),() -> {\r\n                        verticalSlide.setPosition(verticalSpeed, 3130);\r\n\r\n                    })\r\n                    .splineTo(new Vector2d(8,-16), Math.toRadians(-135))//line up to pole\r\n                    .addSpatialMarker(new Vector2d(8,-16), () -> {\r\n                        claw.open();\r\n                    })\r\n                    .waitSeconds(2)\r\n                    .lineToLinearHeading(new Pose2d(13, -10, Math.toRadians(-90)))\r\n                    .addSpatialMarker(new Vector2d(62, -25), () -> {\r\n                        verticalSlide.setPosition(verticalSpeed,3130);\r\n                    })\r\n                    .lineToLinearHeading(new Pose2d(35, -12, Math.toRadians(270)))\r\n                    .build();\r\n\r\n            TrajectorySequence second = drive.trajectorySequenceBuilder(startPose)\r\n                    .addTemporalMarker(0,() -> {\r\n                        claw.close();\r\n                    })\r\n                    .waitSeconds(2)\r\n                    .lineTo(new Vector2d(58,-10))\r\n                    .waitSeconds(1)\r\n                    .lineTo(new Vector2d(20,-12.5))\r\n                    .addSpatialMarker(new Vector2d(56,-15),() -> {\r\n                        verticalSlide.setPosition(verticalSpeed, 3130);\r\n\r\n                    })\r\n                    .splineTo(new Vector2d(8,-16), Math.toRadians(-135))//line up to pole\r\n                    .addSpatialMarker(new Vector2d(8,-16), () -> {\r\n                        claw.open();\r\n                    })\r\n                    .waitSeconds(2)\r\n                    .lineToLinearHeading(new Pose2d(13, -10, Math.toRadians(270)))\r\n                    .addSpatialMarker(new Vector2d(13, -35), () -> {\r\n                        verticalSlide.setPosition(verticalSpeed,3130);\r\n                    })\r\n                    .lineToLinearHeading(new Pose2d(13,-35,Math.toRadians(270)))\r\n                    .turn(Math.toRadians(90))\r\n                    .build();\r\n\r\n            TrajectorySequence first = drive.trajectorySequenceBuilder(startPose)\r\n                    .addTemporalMarker(0,() -> {\r\n                        claw.close();\r\n                    })\r\n                    .waitSeconds(2)\r\n                    .lineTo(new Vector2d(58,-10))\r\n                    .waitSeconds(1)\r\n                    .lineTo(new Vector2d(20,-12.5))\r\n                    .addSpatialMarker(new Vector2d(56,-15),() -> {\r\n                        verticalSlide.setPosition(verticalSpeed, 3130);\r\n\r\n                    })\r\n                    .splineTo(new Vector2d(8,-16), Math.toRadians(-135))//line up to pole\r\n                    .addSpatialMarker(new Vector2d(8,-16), () -> {\r\n                        claw.open();\r\n                    })\r\n                    .waitSeconds(2)\r\n                    .lineToLinearHeading(new Pose2d(13, -10, Math.toRadians(270)))\r\n                    .addSpatialMarker(new Vector2d(13, -35), () -> {\r\n                        verticalSlide.setPosition(verticalSpeed,3130);\r\n                    })\r\n                    .lineToLinearHeading(new Pose2d(13,-54,Math.toRadians(270)))\r\n                    .turn(Math.toRadians(90))\r\n                    .build();\r\n\r\n            /* Actually do something useful */\r\n            if(tagOfInterest == null || tagOfInterest.id == tagFirstId)\r\n            {\r\n                location = LOCATION.FIRST;\r\n            }\r\n            else if (tagOfInterest.id == tagSecondId)\r\n            {\r\n                location = LOCATION.SECOND;\r\n            }\r\n            else if (tagOfInterest.id == tagThirdId)\r\n            {\r\n                location = LOCATION.THIRD;\r\n            }\r\n\r\n            switch(location) {\r\n\r\n                case FIRST: {\r\n\r\n                    complete = first;\r\n                    telemetry.addData(\"OpenCV\", \"Pos 1 Detected\");\r\n                    telemetry.update();\r\n                    break;\r\n                }\r\n\r\n                case SECOND: {\r\n                    complete = second;\r\n                    telemetry.addData(\"OpenCV\", \"Pos 2 Detected\");\r\n                    telemetry.update();\r\n                    break;\r\n                }\r\n                case THIRD: {\r\n                    complete = third;\r\n                    telemetry.addData(\"OpenCV\", \"Pos 3 Detected you are poopoo\");\r\n                    telemetry.update();\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n         * The START command just came in: now work off the latest snapshot acquired\r\n         * during the init loop.\r\n         */\r\n\r\n        /* Update the telemetry */\r\n        if(tagOfInterest != null)\r\n        {\r\n            telemetry.addLine(\"Tag snapshot:\\n\");\r\n            tagToTelemetry(tagOfInterest);\r\n            telemetry.update();\r\n        }\r\n        else\r\n        {\r\n            telemetry.addLine(\"No tag snapshot available, it was never sighted during the init loop :(\");\r\n            telemetry.update();\r\n        }\r\n\r\n\r\n\r\n        if (!isStopRequested())\r\n            drive.followTrajectorySequence(complete);\r\n    }\r\n\r\n    void tagToTelemetry(AprilTagDetection detection)\r\n    {\r\n        telemetry.addLine(String.format(\"\\nDetected tag ID=%d\", detection.id));\r\n    }\r\n}\r\n
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/opmodes/Autonomous/LeftSideSingleCone.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/opmodes/Autonomous/LeftSideSingleCone.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/opmodes/Autonomous/LeftSideSingleCone.java	
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/opmodes/Autonomous/LeftSideSingleCone.java	
@@ -26,6 +26,7 @@
 
 import java.util.ArrayList;
 
+@Deprecated
 @Disabled
 @Autonomous(group = "official")
 public class LeftSideSingleCone extends LinearOpMode
Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/opmodes/Autonomous/RightSideAutoFSM.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode.opmodes.Autonomous;\r\n\r\nimport static org.firstinspires.ftc.teamcode.util.UtilConstants.right;\r\nimport static org.firstinspires.ftc.teamcode.util.UtilConstants.slidePos1;\r\nimport static org.firstinspires.ftc.teamcode.util.UtilConstants.verticalSpeed;\r\n\r\nimport com.acmerobotics.roadrunner.geometry.Pose2d;\r\nimport com.acmerobotics.roadrunner.geometry.Vector2d;\r\nimport com.qualcomm.robotcore.eventloop.opmode.Autonomous;\r\nimport com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;\r\nimport com.qualcomm.robotcore.util.Range;\r\n\r\nimport org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;\r\nimport org.firstinspires.ftc.teamcode.drive.MecanumDriveCancelable;\r\nimport org.firstinspires.ftc.teamcode.mechanisms.Claw;\r\nimport org.firstinspires.ftc.teamcode.mechanisms.SimpleBotVerticalSlide;\r\nimport org.firstinspires.ftc.teamcode.pipelines.AprilTagPipeline;\r\nimport org.firstinspires.ftc.teamcode.trajectorysequence.TrajectorySequence;\r\nimport org.firstinspires.ftc.teamcode.util.AUTO_STATE;\r\nimport org.firstinspires.ftc.teamcode.util.LOCATION;\r\nimport org.openftc.apriltag.AprilTagDetection;\r\nimport org.openftc.easyopencv.OpenCvCamera;\r\nimport org.openftc.easyopencv.OpenCvCameraFactory;\r\nimport org.openftc.easyopencv.OpenCvCameraRotation;\r\n\r\nimport java.util.ArrayList;\r\n\r\n@Autonomous(name = \"Right Side\", group = \"official\")\r\npublic class RightSideAutoFSM extends LinearOpMode {\r\n\r\n    OpenCvCamera camera;\r\n    AprilTagPipeline aprilTagDetectionPipeline;\r\n\r\n\r\n    // Lens intrinsics\r\n    // UNITS ARE PIXELS\r\n    // NOTE: this calibration is for the C920 webcam at 800x448.\r\n    // You will need to do your own calibration for other configurations!\r\n    double fx = 578.272;\r\n    double fy = 578.272;\r\n    double cx = 402.145;\r\n    double cy = 221.506;\r\n\r\n    // UNITS ARE METERS\r\n    double tagsize = 0.166;\r\n\r\n    // Tag ID 1,2,3 from the 36h11 family\r\n    int LEFT = 0;\r\n    int MIDDLE = 1;\r\n    int RIGHT = 2;\r\n\r\n    AprilTagDetection tagOfInterest = null;\r\n\r\n    Claw claw; \r\n    SimpleBotVerticalSlide verticalSlide;\r\n\r\n    Pose2d startPose = right;\r\n\r\n    double parkX;\r\n    double parkY;\r\n\r\n    AUTO_STATE currentState = AUTO_STATE.DETECTING_OPENCV;\r\n    private LOCATION location = LOCATION.SECOND;\r\n\r\n    int cycles = 0;\r\n    int stackHeight = 280;\r\n\r\n    @Override\r\n    public void runOpMode() throws InterruptedException{\r\n        telemetry.addData(\"Status\", \"Initialized\");\r\n        telemetry.update();\r\n\r\n        MecanumDriveCancelable drive = new MecanumDriveCancelable(hardwareMap);\r\n        drive.setPoseEstimate(startPose);\r\n\r\n        claw = new Claw(hardwareMap, telemetry);\r\n        verticalSlide = new SimpleBotVerticalSlide(hardwareMap, telemetry);\r\n\r\n        int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(\"cameraMonitorViewId\", \"id\", hardwareMap.appContext.getPackageName());\r\n        camera = OpenCvCameraFactory.getInstance().createWebcam(hardwareMap.get(WebcamName.class, \"Webcam 1\"), cameraMonitorViewId);\r\n        aprilTagDetectionPipeline = new AprilTagPipeline(tagsize, fx, fy, cx, cy);\r\n\r\n        camera.setPipeline(aprilTagDetectionPipeline);\r\n        camera.openCameraDeviceAsync(new OpenCvCamera.AsyncCameraOpenListener()\r\n        {\r\n            @Override\r\n            public void onOpened()\r\n            {\r\n                camera.startStreaming(800,448, OpenCvCameraRotation.UPRIGHT);\r\n            }\r\n\r\n            @Override\r\n            public void onError(int errorCode)\r\n            {\r\n\r\n            }\r\n        });\r\n\r\n        telemetry.setMsTransmissionInterval(50);\r\n\r\n        //TODO: edit while loop\r\n        while(!opModeIsActive()) {\r\n            claw.close();\r\n            telemetry.addData(\"Tag\",location); //Inform the driver of the detected location\r\n\r\n            ArrayList<AprilTagDetection> currentDetections = aprilTagDetectionPipeline.getLatestDetections();\r\n\r\n            if(currentDetections.size() != 0) {\r\n                boolean tagFound = false;\r\n                for(AprilTagDetection tag : currentDetections) {\r\n                    if(tag.id == LEFT || tag.id == MIDDLE || tag.id == RIGHT) {\r\n                        tagOfInterest = tag;\r\n                        tagFound = true;\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if(tagFound) {\r\n                    telemetry.addLine(\"Tag of interest is in sight!\\n\\nLocation data:\");\r\n                    telemetry.addLine(String.format(\"\\nDetected tag ID=%d\", tagOfInterest.id));\r\n                } else {\r\n                    telemetry.addLine(\"Don't see tag of interest :(\");\r\n\r\n                    if(tagOfInterest == null) telemetry.addLine(\"(The tag has never been seen)\");\r\n                    else {\r\n                        telemetry.addLine(\"\\nBut we HAVE seen the tag before; last seen at:\");\r\n                        telemetry.addLine(String.format(\"\\nDetected tag ID=%d\", tagOfInterest.id));\r\n                    }\r\n                }\r\n\r\n            } else {\r\n                telemetry.addLine(\"Don't see tag of interest :(\");\r\n\r\n                if(tagOfInterest == null) telemetry.addLine(\"(The tag has never been seen)\");\r\n                else {\r\n                    telemetry.addLine(\"\\nBut we HAVE seen the tag before; last seen at:\");\r\n                    telemetry.addLine(String.format(\"\\nDetected tag ID=%d\", tagOfInterest.id));\r\n                }\r\n\r\n            }\r\n            telemetry.update();\r\n            sleep(20);\r\n        }\r\n\r\n        if(!opModeIsActive() || isStopRequested()) return;\r\n\r\n\r\n        waitForStart();\r\n\r\n        if(tagOfInterest == null) location = LOCATION.SECOND;\r\n        else if(tagOfInterest.id == LEFT) location = LOCATION.FIRST;\r\n        else if(tagOfInterest.id == MIDDLE) location = LOCATION.SECOND;\r\n        else location = LOCATION.THIRD;\r\n\r\n        switch (location){\r\n            case FIRST:\r\n                parkX = 17;\r\n                parkY = -12;\r\n                telemetry.addData(\"Parking Position\",\"First Position\");\r\n                telemetry.update();\r\n                break;\r\n            case SECOND:\r\n                parkX = 35;\r\n                parkY = -12;\r\n                telemetry.addData(\"Parking Position\",\"Second Position\");\r\n                telemetry.update();\r\n                break;\r\n            case THIRD:\r\n                parkX = 59;\r\n                parkY = -12;\r\n                telemetry.addData(\"Parking Position\",\"Third Position\");\r\n                telemetry.update();\r\n                break;\r\n        }\r\n\r\n        TrajectorySequence preloadSeq = drive.trajectorySequenceBuilder(startPose)\r\n                .addTemporalMarker(() -> {\r\n                    claw.close();\r\n                    verticalSlide.setPosition(verticalSpeed, slidePos1);\r\n                })\r\n                .lineToLinearHeading(new Pose2d(13,-58,Math.toRadians(90)))\r\n                //.splineToConstantHeading(new Vector2d(13,-58),Math.toRadians(90))\r\n                .lineToLinearHeading(new Pose2d(13,-12,Math.toRadians(90)))\r\n                //.splineTo(new Vector2d(13,-12), Math.toRadians(90))\r\n                //.splineToLinearHeading(new Pose2d(26,-11, Math.toRadians(90)), Math.toRadians(0))\r\n                .lineToLinearHeading(new Pose2d(27.2,-10,Math.toRadians(90)))\r\n                .addTemporalMarker(() -> {\r\n                    verticalSlide.setPosition(verticalSpeed, verticalSlide.getPosition() - 250);\r\n                    sleep(50);\r\n                    claw.open();\r\n                })\r\n                .build();\r\n        TrajectorySequence grabCone = drive.trajectorySequenceBuilder(preloadSeq.end())\r\n                .addDisplacementMarker(() -> {\r\n                    verticalSlide.setPosition(verticalSpeed, Range.clip(stackHeight,0,500));\r\n                    stackHeight -= 80;\r\n                })\r\n                .lineToLinearHeading(new Pose2d(32,-14, Math.toRadians(90)))\r\n                .lineToLinearHeading(new Pose2d(62.2,-11.3, Math.toRadians(0)))\r\n                .build();\r\n        TrajectorySequence deliverCone = drive.trajectorySequenceBuilder(grabCone.end())\r\n                .addDisplacementMarker(() -> {\r\n                    claw.close();\r\n                    sleep(60);\r\n                    verticalSlide.setPosition(verticalSpeed, slidePos1);\r\n                })\r\n                .lineToLinearHeading(new Pose2d(30,-15, Math.toRadians(0)))\r\n                .lineToLinearHeading(new Pose2d(22.7,-12.3, Math.toRadians(99.4)))\r\n                .waitSeconds(0.4)\r\n                .addTemporalMarker(() -> {\r\n                    verticalSlide.setPosition(verticalSpeed, verticalSlide.getPosition() - 250);\r\n                    sleep(50);\r\n                    claw.open();\r\n                })\r\n                .build();\r\n        TrajectorySequence park = drive.trajectorySequenceBuilder(deliverCone.end())\r\n                .addTemporalMarker(() -> {\r\n                    verticalSlide.setPosition(verticalSpeed, 0);\r\n                })\r\n                .lineToLinearHeading(new Pose2d(parkX, parkY, Math.toRadians(90)))\r\n                //.lineToLinearHeading(new Pose2d(59, -12, Math.toRadians(90)))\r\n                .build();\r\n\r\n        currentState = AUTO_STATE.TRAVELING_TO_POLE;\r\n\r\n\r\n        drive.followTrajectorySequenceAsync(preloadSeq);\r\n\r\n        master:while(opModeIsActive() && !isStopRequested()){\r\n\r\n            switch (currentState) {\r\n                case TRAVELING_TO_DEFAULT:\r\n                    if(!drive.isBusy()){\r\n                        telemetry.addData(\"State Machine\",\"Preload Travel\");\r\n                        currentState = AUTO_STATE.DELIVERING_CONE;\r\n                    }\r\n                    break;\r\n                case TRAVELING_TO_STACK:\r\n                    if(!drive.isBusy()){\r\n                        cycles++;\r\n                        telemetry.addData(\"State Machine\",\"Traveling to Stack\");\r\n                        currentState = AUTO_STATE.COLLECTING_CONE;\r\n                        drive.followTrajectorySequenceAsync(deliverCone);\r\n                    }\r\n                    break;\r\n                case COLLECTING_CONE:\r\n                    //TODO: add time out for drop\r\n                    telemetry.addData(\"State Machine\",\"Collecting Cone\");\r\n                    currentState = AUTO_STATE.TRAVELING_TO_POLE;\r\n                    break;\r\n                case TRAVELING_TO_POLE:\r\n                        telemetry.addData(\"State Machine\",\"Traveling to Pole\");\r\n                        telemetry.update();\r\n                        currentState = AUTO_STATE.DELIVERING_CONE;\r\n                    break;\r\n                case DELIVERING_CONE:\r\n                    //TODO: add time out for drop\r\n                    telemetry.addData(\"State Machine\",\"Delivering cone\");\r\n                    if(!drive.isBusy()) {\r\n                        if (cycles < 5) {\r\n                            currentState = AUTO_STATE.TRAVELING_TO_STACK;\r\n                            drive.followTrajectorySequenceAsync(grabCone);\r\n                        } else {\r\n                            currentState = AUTO_STATE.PARKING;\r\n\r\n                        }\r\n                    }\r\n                    break;\r\n                case PARKING:\r\n                        telemetry.addData(\"State Machine\",\"Park\");\r\n                        if(!drive.isBusy())  drive.followTrajectorySequenceAsync(park);\r\n                        currentState = AUTO_STATE.COMPLETE;\r\n                case COMPLETE:\r\n                    if(!drive.isBusy()) break master;\r\n                default:\r\n                    currentState = AUTO_STATE.TRAVELING_TO_DEFAULT;\r\n\r\n            }\r\n\r\n\r\n            Pose2d poseEstimate = drive.getPoseEstimate();\r\n            drive.update();\r\n\r\n            telemetry.addData(\"Cycle\" ,  cycles);\r\n\r\n            telemetry.addData(\"Pose X\",poseEstimate.getX());\r\n            telemetry.addData(\"Pose Y\",poseEstimate.getY());\r\n            telemetry.addData(\"Pose Heading\",poseEstimate.getHeading());\r\n\r\n            telemetry.addData(\"IntakePosition\", claw.getPos());\r\n            telemetry.addData(\"Position\", verticalSlide.getPosition());\r\n\r\n            telemetry.addData(\"State\", currentState);\r\n\r\n            telemetry.addData(\"X\", parkX);\r\n            telemetry.addData(\"Y\", parkY);\r\n\r\n            telemetry.update();\r\n\r\n        }\r\n\r\n        telemetry.addData(\"Status\", \"Path Complete\");\r\n        telemetry.update();\r\n\r\n    }\r\n\r\n}\r\n
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/opmodes/Autonomous/RightSideAutoFSM.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/opmodes/Autonomous/RightSideAutoFSM.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/opmodes/Autonomous/RightSideAutoFSM.java	
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/opmodes/Autonomous/RightSideAutoFSM.java	
@@ -54,7 +54,7 @@
     Claw claw; 
     SimpleBotVerticalSlide verticalSlide;
 
-    Pose2d startPose = right;
+    Pose2d startPose = new Pose2d(57, 38, Math.toRadians(180));;
 
     double parkX;
     double parkY;
@@ -179,10 +179,7 @@
                     verticalSlide.setPosition(verticalSpeed, slidePos1);
                 })
                 .lineToLinearHeading(new Pose2d(13,-58,Math.toRadians(90)))
-                //.splineToConstantHeading(new Vector2d(13,-58),Math.toRadians(90))
                 .lineToLinearHeading(new Pose2d(13,-12,Math.toRadians(90)))
-                //.splineTo(new Vector2d(13,-12), Math.toRadians(90))
-                //.splineToLinearHeading(new Pose2d(26,-11, Math.toRadians(90)), Math.toRadians(0))
                 .lineToLinearHeading(new Pose2d(27.2,-10,Math.toRadians(90)))
                 .addTemporalMarker(() -> {
                     verticalSlide.setPosition(verticalSpeed, verticalSlide.getPosition() - 250);
Index: TeamCode/src/main/java/org/firstinspires/ftc/teamcode/util/UtilConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package org.firstinspires.ftc.teamcode.util;\r\n\r\nimport com.acmerobotics.roadrunner.geometry.Pose2d;\r\n\r\npublic class UtilConstants {\r\n    static public final double verticalSpeed = 1;\r\n\r\n    static public final double FirstArmFlipPosition = 0;\r\n    static public final double SecondArmFlipPosition = 0;\r\n    static public final double ThirdArmFlipPosition = 0;\r\n\r\n    static public final double sense = 0.55;\r\n    static public final double slowModeSense = 0.3;\r\n\r\n    public static final int tagFirstId = 0;\r\n    public static final int tagSecondId = 1;\r\n    public static final int tagThirdId = 2;\r\n\r\n    public static final double clawIntakePos = 0.1;\r\n    public static final double clawOuttakePos = 0.5 ;\r\n\r\n    public static final int slidePos1 = 1730;\r\n    public static final int slidePos2 = 1320;\r\n    public static final int slidePos3 = 765;\r\n//300, 185,\r\n\r\n    public static LOCATION location= LOCATION.FIRST;\r\n    public static int tag = 0;\r\n\r\n    public static final Pose2d right = new Pose2d(33.2, -62, Math.toRadians(90));\r\n    public static final Pose2d left = new Pose2d(62, -38, Math.toRadians(180));\r\n}\r\n
===================================================================
diff --git a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/util/UtilConstants.java b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/util/UtilConstants.java
--- a/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/util/UtilConstants.java	
+++ b/TeamCode/src/main/java/org/firstinspires/ftc/teamcode/util/UtilConstants.java	
@@ -28,5 +28,5 @@
     public static int tag = 0;
 
     public static final Pose2d right = new Pose2d(33.2, -62, Math.toRadians(90));
-    public static final Pose2d left = new Pose2d(62, -38, Math.toRadians(180));
+    public static final Pose2d left = new Pose2d(-37.3, -38, Math.toRadians(180));
 }
